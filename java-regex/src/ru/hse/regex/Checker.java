package ru.hse.regex;

import java.util.List;
import java.util.regex.Pattern;

/**
 * Цель задания - разобраться с регулярными выражениями и классами пакета java.util.regex.
 * Требуется реализовать и протестировать следующий интерфейс, мотоды которого обеспечивают:
 *  проверку корректности имен, допустимых в языке PL/SQL,
 *  проверку корректности URLов и e-mail-ов,
 *  нахождение соответствий (matches) в строке.
 *
 */

public interface Checker {

    /**
     * Метод выдает шаблон для имен в PL/SQL.
     * Все имена начинаются с буквы латинского алфавита.
     * Промежуточными символами могут быть буквы латинского алфавита, цифры,
     *  знак подчеркивания ("_"), или знак доллара ("$").
     * Длина имени не должна превышать 30 символов.
     * @return шаблон для имен в PL/SQL.
     */
    public Pattern getPLSQLNamesPattern();

    /**
     * Метод выдает шаблон для выделения содержащихся на web-странице URL-ов.
     * Содержащиеся на web-странице URLы описываются тегом &lt;a href = ...&gt; (или &lt;a href=.../&gt;).
     *  Ремарка для начинающих: в HTML &gt; - это знак "больше", &lt; - это знак "меньше", а комментарии пишутся в таком
     *  "странном" виде, чтобы они корректно отображались в HTML, который из них генерируется через javadoc).
     * Будем условно называть URLом закрытый или незакрытый тег a с обязательным атрибутом href,
     *  значение которого не должно содержать пробельных символов (см.ниже).
     * Заключать значение атрибута href в кавычки необязательно, но если использованы двойные кавычки,
     *  то в значении МОГУТ быть пробельные символы.
     * как и другие имена в HTML, имена тега A и атрибута HREF не чувствительны к регистру.
     * Между символом меньше, именем тега, названием атрибута, знаком равно и символом больше
     * могут быть следующие пробельные символы:
     * табуляция, перевод строки, возврат каретки, перевод формата, пробел.
     * @return шаблон для выделения содержащихся на web-странице URL-ов.
     */
    public Pattern getHrefURLPattern();

    /**
     * Метод выдает шаблон для e-mail.
     * e-mail имеет формат: &lt;аккаунт&gt;@&lt;домен&gt;.&lt;домен_первого_уровня&gt;.
     * &lt;аккаунт&gt; должен быть длиной не более 22 символов и состоять из символов:
     *  латинские буквы, цифры, знак подчеркивания ("_"), точка ("."), дефис ("-").
     * Аккаунт не может начинаться с символов дефис ("-"), точка (".") или знак подчеркивания ("_").
     * Аккаунт не может заканчиваться символом дефис ("-"), точка (".") или знак подчеркивания ("_").
     * &lt;Домен&gt; может быть доменом любого уровня, каждый уровень отделяется от другого символом точка (".").
     * Название домена каждого уровня должно состоять более чем из одного символа,
     * начинаться и заканчиваться буквой латинского алфавита или цифрой.
     * Промежуточными символами могут быть буквы латинского алфавита, цифры или дефис.
     * &lt;Домен первого уровня&gt; - допустим один из следующих: .ru, .com, .net, .org.
     * @return шаблон для e-mail адресов.
     */
    public Pattern getEMailPattern();

    /**
     * Метод проверяет соответствие inputString шаблону pattern.
     * @param inputString строка, подлежащая проверке.
     * @param pattern шаблон.
     * @throws IllegalArgumentException если только один из аргументов равен null.
     * @return true, если inputString соответствует шаблону pattern, либо inputString и pattern являются null-ами.
     */
    public boolean checkAccordance(String inputString, Pattern pattern) throws IllegalArgumentException;

    /**
     * Метод возвращает список всех соответствий в inputString шаблону pattern.
     * @param inputString строка для поиска
     * @param pattern шаблон поиска.
     * @throws IllegalArgumentException если хотя бы один из аргументов равен null.
     * @return Список всех соответствий, или пустой список, если соответствий нет.
     */
    public List<String> fetchAllTemplates(StringBuffer inputString, Pattern pattern) throws IllegalArgumentException;
}
